{
	// Place your LiSci-transmitter workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"data-lang-content": {
		"scope": "html,ejs",
		"prefix": "lang",
		"body": [
			"data-lang-content=\"$1\""
		],
		"description": "insert data-lang-content attribute"
	},
	"data-lang-content-value": {
		"scope": "html,ejs",
		"prefix": "langv",
		"body": [
			"data-lang-content-value=\"$1\""
		],
		"description": "insert data-lang-value attribute"
	},
	"data-lang-content-placeholder": {
		"scope": "html,ejs",
		"prefix": "langp",
		"body": [
			"data-lang-content-placeholder=\"$1\""
		],
		"description": "insert data-lang-placeholder attribute"
	},
	"data-lang-arguments": {
		"scope": "html,ejs",
		"prefix": "langarg",
		"body": [
			"data-lang-arguments=\"$1\""
		],
		"description": "insert data-lang-arguments attribute"
	},
	"newPage": {
		"scope": "ejs,html",
		"prefix": "newPage",
		"body": [
			"<!DOCTYPE html>",
			"<html lang=\"de\">",
			"<!-- TODO: Add ${TM_FILENAME_BASE}.title to en and de language files -->",
			"<head>",
			"  <%- include(\"./partials/baseHead.ejs\") %>",
			"",
			"",
			"  <title data-lang-content=\"${TM_FILENAME_BASE} title\">${1:${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}}</title>",
			"  <script src=\"${TM_FILENAME_BASE}.js\"></script>",
			"  <link rel=\"stylesheet\" href=\"${TM_FILENAME_BASE}.css\">",
			"</head>",
			"",
			"<body>",
			"  <%- include('./partials/base.ejs') %>",
			"",
			"  <!-- TODO: Add ${TM_FILENAME_BASE} body content here -->",
			"  $0",
			"",
			"</body>",
			"",
			"</html>"
		],
		"isFileTemplate": true,
		"description": "Create a new page with the basic structure"
	},
	"newRouter": {
		"scope": "javascript",
		"prefix": "newRouter",
		"body": [
			"const { Router } = require('express');",
			"const sanitizeHtml = require('sanitize-html');",
			"const router = Router();",
			"",
			"/**",
			" * @param {MongoConnector} db - The MongoDB connector instance.",
			" * @returns {Router} The router instance.",
			" */",
			"",
			"sanitizeHtmlAllowedTags = sanitizeHtml.defaults.allowedTags.concat(['img', 'embed', 'iframe']);",
			"",
			"module.exports = (db) => {",
			"",
			"// TODO: Add ${TM_FILENAME_BASE} routes here",
			"$0",
			"    return router;",
			"};"
		],
		"isFileTemplate": true,
		"description": "Create a new router with the basic structure"
	},
	"newRoute": {
		"scope": "javascript",
		"prefix": "newRoute, nr",
		"body": [
			"router.${1|get,post,put,delete|}('/${2:route}', async (req, res) => {",
			"    try {",
			"        $0",
			"    } catch (error) {",
			"        console.error(error);",
			"        res.status(500).send('Internal Server Error');",
			"    }",
			"});"
		],
		"description": "Create a new route with the basic structure"
	}
}